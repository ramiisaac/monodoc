import { GeneratorConfig, NodeContext, AIResponse } from "../types";
import { logger } from "../utils/logger";
import { AIClient } from "./AIClient";
import { SmartPromptBuilder } from "./SmartPromptBuilder";
import { SmartDocumentationEngine } from "../features/SmartDocumentationEngine";

/**
 * Orchestrates the generation of JSDoc content for a single TypeScript node.
 * It uses the AIClient to interact with the LLM and the SmartPromptBuilder to
 * construct the optimal prompt based on the node's context and configuration.
 */
export class DocumentationGenerator {
  private aiClient: AIClient;
  private promptBuilder: SmartPromptBuilder;
  private smartDocumentationEngine: SmartDocumentationEngine;

  constructor(
    aiClient: AIClient,
    smartDocumentationEngine: SmartDocumentationEngine,
  ) {
    this.aiClient = aiClient;
    this.promptBuilder = new SmartPromptBuilder();
    this.smartDocumentationEngine = smartDocumentationEngine;
    logger.debug("DocumentationGenerator initialized.");
  }

  /**
   * Generates JSDoc content for a given NodeContext using the AI model.
   * This involves building a prompt and calling the AI client.
   * It also leverages the SmartDocumentationEngine to get the appropriate template.
   * @param nodeContext The context of the TypeScript node.
   * @param config The generator configuration.
   * @returns An AIResponse object with generated JSDoc content or status.
   */
  async generate(
    nodeContext: NodeContext,
    config: GeneratorConfig,
  ): Promise<AIResponse> {
    // 1. Get the template and template data based on smart documentation engine
    const generatedTemplateContent =
      await this.smartDocumentationEngine.generateDocumentation(
        nodeContext,
        config,
      );

    if (
      !generatedTemplateContent ||
      generatedTemplateContent.trim() === "SKIP"
    ) {
      return {
        jsdocContent: null,
        status: "skip",
        reason:
          "SmartDocumentationEngine returned empty or explicit SKIP from template.",
      };
    }

    // 2. Build the full prompt using the SmartPromptBuilder, incorporating the template
    // The prompt builder needs to know about the template content to embed it correctly.
    const prompt = this.promptBuilder.buildPrompt(
      nodeContext,
      config,
      generatedTemplateContent,
    );

    // 3. Call the AI Client to generate the JSDoc
    try {
      const result = await this.aiClient.generateJSDoc({
        ...nodeContext,
        aiPrompt: prompt.userPrompt, // Pass the user prompt generated by builder
        aiSystemPrompt: prompt.systemPrompt, // Pass the system prompt generated by builder
      } as NodeContext); // Cast to allow aiPrompt/aiSystemPrompt fields if needed for AIClient internal use

      // Check for explicit "SKIP" signal from the AI response
      if (result.jsdocContent?.trim().toLowerCase() === "skip") {
        return {
          jsdocContent: null,
          status: "skip",
          reason: 'AI model explicitly returned "SKIP".',
        };
      }

      return result;
    } catch (error: unknown) {
      // Use unknown for generic catch
      logger.error(
        `AI generation failed for ${nodeContext.nodeName}: ${error instanceof Error ? error.message : String(error)}`,
      );
      return {
        jsdocContent: null,
        status: "error",
        reason: error instanceof Error ? error.message : String(error),
      };
    }
  }
}

name: Release & Publish
on:
  release:
    types: [published] # Triggered by publishing a GitHub release
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type for bump (patch, minor, major) - Only applies if no Git tag'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Run release process in dry-run mode (no actual publish/release)'
        required: true
        default: false
        type: boolean

jobs:
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.final-version.outputs.version }}
      package_name: ${{ steps.get-package-name.outputs.name }}
      dry_run: ${{ github.event.inputs.dry_run }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git tag detection
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Project
        run: pnpm run build

      - name: Run Security Audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: ${{ github.event.inputs.dry_run == true }} # Fail on errors in real runs

      - name: Get current version from package.json
        id: get-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get package name from package.json
        id: get-package-name
        run: echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT

      - name: Auto-bump version (if workflow_dispatch and no tag)
        if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/v') && github.event.inputs.dry_run == false
        run: |
          echo "Bumping version to ${{ github.event.inputs.version }}"
          pnpm version ${{ github.event.inputs.version }} --no-git-tag-version
          echo "Updated version to $(node -p "require('./package.json').version")"
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        id: version-bump # Add an ID to this step

      - name: Set release version from tag or bumped version
        id: final-version
        run: |
          if startsWith(github.ref, 'refs/tags/v'); then
            echo "version=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')" >> $GITHUB_OUTPUT
          else
            # Use output from version-bump if it ran, else use original get-version
            echo "version=${{ steps.version-bump.outputs.version || steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.dry_run == 'false'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to NPM
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          sleep 30 # Give NPM a moment to process
          pnpm view ${{ needs.release.outputs.package_name }}@${{ needs.release.outputs.release_version }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.dry_run == 'false'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to GitHub Packages
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Uses the automatically provided GITHUB_TOKEN

      - name: Verify GitHub Packages publication
        run: |
          sleep 30 # Give GitHub Packages a moment to process
          # Note: GitHub Packages uses the repository owner as the scope by default
          pnpm view ${{ needs.release.outputs.package_name }}@${{ needs.release.outputs.release_version }} --registry=https://npm.pkg.github.com

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release, publish-npm, publish-github-packages]
    if: needs.release.outputs.dry_run == 'false'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create and Push Git Tag (if not already a tag-based release)
        if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          git tag -a "v${{ needs.release.outputs.release_version }}" -m "Release v${{ needs.release.outputs.release_version }}"
          git push origin "v${{ needs.release.outputs.release_version }}"

      - name: Generate Release Notes
        run: |
          echo "## üöÄ Release v${{ needs.release.outputs.release_version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### üì¶ Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### NPM Registry:" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "npm install -g ${{ needs.release.outputs.package_name }}@${{ needs.release.outputs.release_version }}" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### GitHub Packages:" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "npm install -g ${{ needs.release.outputs.package_name }}@${{ needs.release.outputs.release_version }} --registry=https://npm.pkg.github.com" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### üîó Links" >> RELEASE_NOTES.md
          echo "- [NPM Package](https://www.npmjs.com/package/${{ needs.release.outputs.package_name }}/v/${{ needs.release.outputs.release_version }})" >> RELEASE_NOTES.md
          echo "- [GitHub Package](https://github.com/${{ github.repository }}/packages/${{ needs.release.outputs.package_name }}/v/${{ needs.release.outputs.release_version }})" >> RELEASE_NOTES.md
          echo "- [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)" >> RELEASE_NOTES.md # Update this to your real docs site if you have one

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.release.outputs.release_version }}"
          release_name: "Release v${{ needs.release.outputs.release_version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  notify-status:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [release, publish-npm, publish-github-packages, create-github-release]
    if: always() # Run even if previous jobs failed
    steps:
      - name: Report Release Status
        run: |
          echo "## üöÄ Release Summary for v${{ needs.release.outputs.release_version }}"
          echo "- **NPM Publication**: ${{ needs.publish-npm.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          echo "- **GitHub Packages Publication**: ${{ needs.publish-github-packages.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          echo "- **GitHub Release Creation**: ${{ needs.create-github-release.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          if ${{ needs.release.outputs.dry_run == 'true' }}; then
            echo "---"
            echo "This was a DRY RUN. No packages were published and no GitHub release was created."
          fi

